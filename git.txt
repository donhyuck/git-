GIT 설치 및 업데이트
cmd
-> git
	없으면 =>  다운로드
	있다면..

-> git update-git-for-windows
	최신버전 => 사용
	구버전

-> y
	업데이트 후 사용
=============================
GIT 명령어
> git init
1. 작업할 폴더에 저장소를 만든다.
이제 이 저장소에서 시간여행을 할 수 있다.

2. 현재 상태표시
작업폴더에는 두가지 종류가 있게 된다. 내가 작업한 파일과 git에 저장된 파일
그 두종류의 차이를 보여주는 것이 status이다.
-> git status

3. 저장소 전 장바구니에 담기(커밋)
-> git add .  => 파일전부
-> git add git.txt  => 일부만

4. 사용자 본인 등록(커밋 전)
4-1. 기등록된 사용자 확인
> git config user.name
> git config user.email

안나오면 4-3으로 (유저등록)
뭐가 나오면, 4-2로 지워주고, 4-3 유저등록

4-2. 사용자를 초기화하는 명령어

여러명과 사용하는 컴퓨터일 경우, 타인의 정보가 등록되었을 수 있다.
> git config --global --unset-all user.name
> git config --global --unset-all user.email

다시 한번 확인

> git config user.name
> git config user.email

4-3. 내 정보 등록
git config user.name "[깃허브아이디]"
git config user.email "[깃허브가입이메일]"

git config user.name "donhyuck"
git config user.email "leedonhyuck123@gmail.com"

다시 한번 확인
> git config user.name
> git config user.email

5. 커밋
> git commit -m "~~커밋제목~~"
> git log
커밋내역을 살펴볼수있다.

6. 두번째 커밋(작업을 진행해나갔을 경우)
추가 작업으로 저장소와 작업파일간의 차이가 생겼다.

modified:    git.txt
"git.txt파일이 수정되었습니다. git add 나 git commit을 하세요"

두번째 커밋을 하고, log로 그 내역을 볼 수 있으며, 사용자가 언제 무슨 제목의 커밋을 했는지 볼 수 있다.

7. 마지막 커밋 상태 파일로 돌아가기
> git checkout -f .

작업파일은 변화가 있어도 이걸 다 날리고 다시 마지막 커밋 상태로 돌아간다. 저장소상태와 동일하게 만든다.

8. 세번째 커밋
9. 커밋코드로 이동
> git checkout -f "이동할 커밋주소 붙여넣기~~"
=> 작업폴더 상태가 예전모습이다.

이후, 다시 원래대로 돌아오기
> git checkout -f .
> git checkout -f master

10. 원격 저장소와 연결
> git remote -v
기존 연결 확인

> git remote add origin [원격리포지터리주소]
원격리포지터리를 origin 이라는 즐겨찾기 이름으로 변경
origin 이라는 이름은 다른 이름으로 바꿔도 됩니다.

> git remote remove origin
origin 이라는 이름의 즐겨찾기(외부 리포지터리와의 연결) 제거

11. 원격저장소에 업로드
> git push origin master
origin 이 가리키는 원격지 주소로 로컬 리포지터리의 커밋들을 업로드

처음엔 저장된 리포트가 없다.
remote add를 하고 push를 한다.

12. 다른 공간B에서 기존작업이어하기(pull)
<다른 작업공간 내>
1) 다른 작업공간에서도 일단 저장소는 만들어야 받을 수 있다.
> git init

2) 저장소--(연결)--다른 작업공간
> git remote origin ~~작업git주소~~

3) pull로 기존작업가져오기
> git pull origin master